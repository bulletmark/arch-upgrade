#!/bin/bash
# Run an upgrade of an arch linux system in a new terminal window.
# M.Blakeney.

### Start conf ..
# These variables can be overridden in your $CONF file.

# Package manager we want to use.
ARCH_UPGRADE="yaourt -Syua --noconfirm"

# Terminal app we want to use. Arch doesn't use /etc/alternatives :(
#XTERMINAL="x-terminal-emulator"
XTERMINAL="gnome-terminal"

### End conf

# Number of lines of recent arch news we want to see
NUMNEWS=10
NEWSURL="https://www.archlinux.org/news/"

MIRLIST=/etc/pacman.d/mirrorlist
NEWLIST=$MIRLIST.pacnew

PROG=$(basename $0)
LAST=${XDG_CACHE_HOME:-$HOME/.cache}/$PROG.cache
CONF=${XDG_CONFIG_HOME:-$HOME/.config}/$PROG.conf

WMCLASS="ArchUpgrade"
WMICON="arch-upgrade"

usage() {
    echo "Usage: $PROG"
    echo "Options:"
    echo "-t (run within a new terminal with GUI prompts)"
    echo "-g (run with GUI prompts)"
    echo "-d (include development packages in upgrade)"
    echo "-n (skip fetch and check/report of latest news)"
    echo "-m (skip check/report of mirrorlist file update)"
    exit 1
}

# Process command line options
NEWTERM=0
GUI=0
DEVEL=""
NEWS=""
MIRROR=""
while getopts tgdnm c; do
    case $c in
    t) GUI=1;NEWTERM=1;;
    g) GUI=1;;
    d) DEVEL="-d";;
    n) NEWS="-n";;
    m) MIRROR="-m";;
    ?) usage;;
    esac
done

shift $((OPTIND - 1))

if [[ $# -ne 0 ]]; then
    usage
fi

# Function to read yes/no response
ask() {
    # Arg 1 is question prompt to user
    # Arg 2 is optional "Y" or "N" default
    while true; do
        if [[ "$2" = "Y" ]]; then
            prompt="Y/n"
            default="Y"
        elif [[ "$2" = "N" ]]; then
            prompt="y/N"
            default="N"
        else
            prompt="y/n"
            default=""
        fi

        # Ask the question
        read -p "$1 [$prompt] " REPLY

        # Default?
        if [[ -z "$REPLY" ]]; then
            REPLY=$default
        fi

        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0;;
            N*|n*) return 1;;
        esac
    done
}

# Output a GUI prompt with given message.
# We use wmctrl to keep the dialog on top of other windows.
popup() {
    local ztype="$1"
    local msg="$2"
    (sleep 1 && wmctrl -xa $WMCLASS -I $WMICON -b add,above)&
    zenity --class $WMCLASS --icon-name $WMICON --$ztype --title "" --text "$msg"
}

if [ -f $CONF ]; then
    source $CONF
fi

# Spawn off a terminal window to run ourself again
if [[ $NEWTERM -ne 0 ]]; then
    exec $XTERMINAL --class $WMCLASS -e "$0 -g $DEVEL $NEWS $MIRROR"
fi

tmp=$(mktemp)
trap "rm -f $tmp; exit" 0 1 2 3 15

exec 200>"/tmp/$PROG"
if ! flock -n 200; then
    echo "ERROR: $PROG is already running!" >&2
    exit 1
fi

echo "##### Arch software upgrade starting #####"

if [[ $GUI -eq 0 ]]; then
    unset DISPLAY
fi

# Grab latest news and report any new news items
if [[ -z "$NEWS" ]]; then
    if ! which html2text &>/dev/null; then
	echo "ERROR: Please install html2text utility." >&2
	exit 1
    fi
    echo
    echo "Fetching latest Arch news .."
    curl -silent "$NEWSURL" |
    html2text --ignore-emphasis --ignore-links --ignore-images |
    grep '^20[0-9][0-9]-' | head -$NUMNEWS >$tmp

    if [[ -f $LAST ]]; then
	diffs=$(comm -23 <(sort $tmp) <(sort $LAST) | sort -rn)
    else
	diffs=$(cat $tmp)
    fi

    if [[ -n $diffs ]]; then
	# If new news then stop and prompt
	echo
	echo "*** WARNING - ARCH NEWS UPDATE ***:"
	echo "$diffs"
	echo
	echo "Read details at $NEWSURL"
	msg="Continue Arch software upgrade?"
	if [[ $GUI -ne 0 ]]; then
	    if ! popup question "$msg"; then
		exit 0
	    fi
	else
	    echo
	    if ! ask "$msg" N; then
		exit 0
	    fi
	fi

	# Update stamp file now the user has chosen to proceed
	mkdir -p $(dirname $LAST)
	mv $tmp $LAST
    else
	echo
	echo "No Arch news updates."
    fi
fi

echo
echo "Performing Arch software update and upgrade .."

if [[ -n "$DEVEL" ]]; then
    DEVEL="--devel"
fi

# Can redefine/override following environment variable (e.g. add to the
# $CONF config file, or in ~/.profile) to use different package manager.
# e.g: export ARCH_UPGRADE:="pacaur -Syu --noconfirm --noedit"
echo
echo ${ARCH_UPGRADE:="yaourt -Syua --noconfirm"}

if ! $ARCH_UPGRADE $DEVEL; then
    msg="Arch software upgrade finished with ERROR."
    echo
    echo "##### $msg #####"
    if [[ $GUI -ne 0 ]]; then
	popup error "$msg"
    fi
    exit 1
fi

if [ -z "$MIRROR" -a -f $MIRLIST -a -f $NEWLIST ]; then
    sed '/^ *#/d' $MIRLIST | while read line; do
    if ! grep -q " *#* *$line *$" $NEWLIST; then
	echo
	echo "Warning: $NEWLIST has been updated."
    fi
    done
fi

msg="Arch software upgrade finished."
echo
echo "##### $msg #####"
if [[ $GUI -ne 0 ]]; then
    popup info "$msg"
fi
exit 0
