#!/bin/bash
# Run an upgrade of an arch linux system in a new terminal window.
# M.Blakeney.

### Start conf ..
# These variables can be overridden in your personal configuration file.

# Package manager we want to use.
ARCH_UPGRADE="pacaur -Syu --noconfirm --noedit"

### End conf

# Number of lines of recent arch news we want to see
NUMNEWS=10

MIRLIST=/etc/pacman.d/mirrorlist
NEWLIST=$MIRLIST.pacnew

PROG="$(basename $0)"
LAST="${XDG_CACHE_HOME:-$HOME/.cache}/$PROG.cache"
CONF="${XDG_CONFIG_HOME:-$HOME/.config}/$PROG.conf /etc/$PROG.conf"

WMCLASS="ArchUpgrade"
WMICON="arch-upgrade"

usage() {
    echo "Usage: $PROG"
    echo "Options:"
    echo "-g (run with GUI prompts)"
    echo "-d (include development packages in upgrade)"
    echo "-n (skip fetch and check/report of latest news)"
    echo "-m (skip check/report of mirrorlist file update)"
    echo "-c <conffile> (alternative configuration file)"
    echo
    echo -e "The configuration file used is the first found of:\n$CONF"
    exit 1
}

# Process command line options
GUI=0
DEVEL=""
NEWS=""
MIRROR=""
FCONF=""
while getopts gdnmc: c; do
    case $c in
    g) GUI=1;;
    d) DEVEL="-d";;
    n) NEWS="-n";;
    m) MIRROR="-m";;
    c) FCONF="$OPTARG";;
    ?) usage;;
    esac
done

shift $((OPTIND - 1))

if [[ $# -ne 0 ]]; then
    usage
fi

# Trim lead/trail spaces from given string argument
trim() {
    local args="${*%% }"
    args="${args## }"
    echo "$args"
}

# Function to read yes/no response
ask() {
    # Arg 1 is question prompt to user
    # Arg 2 is optional "Y" or "N" default
    echo
    while true; do
        if [[ "$2" = "Y" ]]; then
            prompt="Y/n"
            default="Y"
        elif [[ "$2" = "N" ]]; then
            prompt="y/N"
            default="N"
        else
            prompt="y/n"
            default=""
        fi

        # Ask the question
        read -p "$1 [$prompt] " REPLY

        # Default?
        if [[ -z "$REPLY" ]]; then
            REPLY=$default
        fi

        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0;;
            N*|n*) return 1;;
        esac
    done
}

# Output a GUI or command line prompt with given message.
message() {
    local mtype="$1"
    local msg="$2"
    local def="$3"

    res=0
    if [ $GUI -eq 0 ]; then
	if [ "$mtype" = question ]; then
	    ask "$msg" "$def"
	    res=$?
	elif [ "$mtype" = error ]; then
	    echo
	    echo -e "ERROR: $msg"
	    exit 1
	else
	    echo
	    echo -e "$msg"
	fi
    else
	# Using GUI so check for required packages.
	for prog in zenity wmctrl; do
	    if ! type $prog &>/dev/null; then
		ask "ERROR: Please install $prog." Y
		exit 1
	    fi
	done

	if [ "$mtype" = error ]; then
	    msg="ERROR: $msg"
	fi

	(sleep 1 && wmctrl -xa $WMCLASS -I $WMICON -b add,above)&
	zenity --class $WMCLASS --icon-name $WMICON --$mtype \
	    --title "" --text "$msg" --ellipsize
	res=$?
	if [ "$mtype" = error ]; then
	    exit 1
	fi
    fi

    return $res
}

if [ -n "$FCONF" ]; then
    if [ ! -r "$FCONF" ]; then
	message error "Can not read configuration file \"$FCONF\"."
    fi
    conf="$FCONF"
else
    for conf in $CONF; do
	if [ -f $conf ]; then
	    source $conf
	    break
	fi
	conf=""
    done

    if [ -z "$conf" ]; then
	message error "No configuration file found at any of:\n\n$CONF"
    fi
fi

exec 200>"/tmp/$PROG"
if ! flock -n 200; then
    message error "$PROG is already running!"
fi

read HELPER junk <<<$ARCH_UPGRADE
if ! type $HELPER &>/dev/null; then
    message error "AUR helper \"$HELPER\" is not installed."
    exit 1
fi

tmp=$(mktemp)
tmp2=$(mktemp)
trap "rm -f $tmp $tmp2 /tmp/$PROG; exit" 0 1 2 3 15

echo "##### Arch software upgrade starting #####"

if [[ $GUI -eq 0 ]]; then
    unset DISPLAY
fi

# Grab latest news and report any new news items
if [[ -z "$NEWS" ]]; then
    for prog in curl unidecode xmlstarlet; do
	if ! type $prog &>/dev/null; then
	    message error "Please install $prog utility."
	fi
    done
    echo
    # Get news from appropriate feed ..
    case $(uname -m) in
    i686)
	echo "Fetching latest Arch 32 news .."
	NEWSURL="https://news.archlinux32.org/rss.php"
	curl --silent "$NEWSURL" | unidecode |
	xml sel -t -m //_:entry -v _:published -o "|" -v _:title -n >$tmp2
	;;
    *)
	echo "Fetching latest Arch news .."
	NEWSURL="https://www.archlinux.org/feeds/news/"
	curl --silent "$NEWSURL" | unidecode |
	xml sel -t -m //item -v pubDate -o "|" -v title -n >$tmp2
	;;
    esac

    head -$NUMNEWS $tmp2 | while IFS="|" read d t; do
	dt=$(date -d"$d" "+%Y-%m-%d")
	echo "$dt: $(trim $t)"
    done >$tmp

    if [[ -f $LAST ]]; then
	diffs=$(comm -23 <(sort $tmp) <(sort $LAST) | sort -rn)
    else
	diffs=$(cat $tmp)
    fi

    if [[ -n $diffs ]]; then
	# If new news then stop and prompt
	echo
	echo "*** WARNING - ARCH NEWS UPDATE ***:"
	echo "$diffs"
	echo
	echo "Read details at $NEWSURL"
	if ! message question "Continue Arch software upgrade?" N; then
	    exit 0
	fi

	# Update stamp file now the user has chosen to proceed
	mkdir -p $(dirname $LAST)
	mv $tmp $LAST
    else
	echo
	echo "No Arch news updates."
    fi
fi

echo
echo "Performing Arch software upgrade, using $conf."

if [[ -n "$DEVEL" ]]; then
    DEVEL="--devel"
fi

# Can redefine/override following environment variable (e.g. add to the
# $CONF config file, or in ~/.profile) to use different package manager.
echo
echo $ARCH_UPGRADE $DEVEL

if ! $ARCH_UPGRADE $DEVEL; then
    message error "Arch software upgrade finished with ERROR."
fi

if [ -z "$MIRROR" -a -f $MIRLIST -a -f $NEWLIST ]; then
    sed '/^ *#/d' $MIRLIST | while read line; do
	if ! grep -q " *#* *$line *$" $NEWLIST; then
	    message info "Arch software upgrade completed.\n\nNote that $NEWLIST has been updated."
	    exit 1
	fi
    done

    # Test whether above pipe-line terminated early
    if [ $? != 0 ]; then
	exit 0
    fi
fi

message info "Arch software upgrade completed."
exit 0
