#!/bin/bash
# Run an upgrade of an arch linux system in a new terminal window.
# M.Blakeney.

# Terminal app we want to use. Arch doesn't use /etc/alternatives :(
#XTERMINAL="x-terminal-emulator"
XTERMINAL="gnome-terminal"

# Number of lines of recent arch news we want to see
NUMNEWS=10
NEWSURL="https://www.archlinux.org/news/"

PROG=$(basename $0)
LAST=$HOME/.$PROG

CLS="--class ArchUpgrade"

usage() {
    echo "Usage: $PROG"
    echo "Options:"
    echo "-s (run as slave, i.e. do not start and run in a new $XTERMINAL)"
    echo "-c (run directly in command line, with no GUI prompts)"
    exit 1
}

# Process command line options
SLAVE=0
CMDLINE=0
while getopts sc c; do
    case $c in
    s) SLAVE=1;;
    c) SLAVE=1;CMDLINE=1;;
    ?) usage;;
    esac
done

shift $((OPTIND - 1))

if [ $# -ne 0 ]; then
    usage
fi

# Function to read yes/no response
ask() {
    # Arg 1 is question prompt to user
    # Arg 2 is optional "Y" or "N" default
    while true; do
        if [ "$2" = "Y" ]; then
            prompt="Y/n"
            default="Y"
        elif [ "$2" = "N" ]; then
            prompt="y/N"
            default="N"
        else
            prompt="y/n"
            default=""
        fi

        # Ask the question
        read -p "$1 [$prompt] " REPLY

        # Default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0;;
            N*|n*) return 1;;
        esac
    done
}

# Spawn off a terminal window to run ourself again
if [[ $SLAVE -eq 0 ]]; then
    exec $XTERMINAL $CLS -e "$0 -s"
fi

tmp=$(mktemp)
tmp2=$(mktemp)
trap "rm -f $tmp $tmp2; exit" 0 1 2 3 15

echo "##### Arch software upgrade starting #####"
echo
echo "Fetching latest Arch news .."

# Grab latest news and report any new news items
curl -silent "$NEWSURL" >$tmp2
# Note new html2text won't accept standard input
html2text --ignore-emphasis --ignore-links --ignore-images $tmp2 |
grep '^20[0-9][0-9]-' | head -$NUMNEWS >$tmp

if [[ -f $LAST ]]; then
    diffs=$(comm -23 <(sort $tmp) <(sort $LAST) | sort -rn)
else
    diffs=$(cat $tmp)
fi

if [[ -n $diffs ]]; then
    mv $tmp $LAST
    # If new news then stop and prompt
    echo
    echo "*** WARNING - ARCH NEWS UPDATE ***:"
    echo "$diffs"
    echo
    echo "Read details at $NEWSURL"
    msg="Continue Arch software upgrade?"
    if [ $CMDLINE -eq 0 ]; then
	if ! zenity $CLS --icon-name arch-upgrade --title "" --question \
	    --text "$msg"; then
	    exit 0
	fi
    else
	echo
	if ! ask "$msg" N; then
	    exit 0
	fi
    fi
else
    echo
    echo "No Arch news updates."
fi

echo
echo "Performing Arch software update and upgrade .."

# Can redefine following env variable to use different package manager
echo
echo ${ARCH_UPGRADE:="yaourt -Syua --noconfirm"}

if ! $ARCH_UPGRADE; then
    msg="Arch software upgrade finished with ERROR."
    echo
    echo "##### $msg #####"
    if [ $CMDLINE -eq 0 ]; then
	zenity $CLS --title "" --error --text "$msg"
    fi
    exit 1
fi

msg="Arch software upgrade finished."
echo
echo "##### $msg #####"
if [ $CMDLINE -eq 0 ]; then
    zenity $CLS --icon-name arch-upgrade --title "" --info --text "$msg"
fi
exit 0
